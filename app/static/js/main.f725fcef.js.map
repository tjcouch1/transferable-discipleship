{"version":3,"file":"static/js/main.f725fcef.js","mappings":"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","sources":["src/util/PathUtil.ts","src/util/Util.ts","src/services/ScreenService.ts","src/Theme.ts","src/util/DesignStyleSheets.ts","src/components/contents/Text.tsx","src/components/contents/HeaderText.tsx","src/components/contents/SubheaderText.tsx","src/components/contents/Header.tsx","src/components/contents/buttons/BasicButton.tsx","src/util/ActionFactory.ts","src/components/contents/buttons/ActionButton.tsx","src/components/contents/ButtonList.tsx","src/components/TScrollView.tsx","src/components/screens/HeaderWithButtons.tsx","src/components/contents/ContentsContext.ts","src/components/contents/ContentList.tsx","src/components/screens/ContentListScreen.tsx","src/components/screens/Screens.tsx","src/components/WebWrapper.tsx","src/components/contents/buttons/ToggleButton.tsx","src/components/contents/buttons/Buttons.tsx","src/components/contents/Slide.tsx","src/components/contents/ScriptureSlide.tsx","src/services/ScriptureService.ts","src/components/ScriptureText.tsx","src/components/contents/ScrRangeDisplay.tsx","src/services/ImageService.ts","src/components/contents/Contents.ts","src/hooks/usePromise.ts","src/components/contents/Image.tsx","App.tsx","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/create fake namespace object","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Handles path manipulation\r\n */\r\n\r\nexport const PATH_DELIMITER = '/';\r\n\r\nexport const ROOT_PATH = 'app:';\r\n\r\nexport function pathJoin(...paths: string[]): string {\r\n  // Don't want empty strings to do anything\r\n  const pathsClean = paths.filter(path => path);\r\n\r\n  if (pathsClean.length === 0) return '';\r\n  if (pathsClean[0] === '..')\r\n    throw new Error(\r\n      'Cannot go back .. as the first path as there is nowhere back to go',\r\n    );\r\n\r\n  const pathSegments = pathsClean\r\n    // separate the paths out along the delimiter\r\n    .flatMap(path => path.split(PATH_DELIMITER))\r\n    // remove empty strings\r\n    .filter(path => path);\r\n\r\n  for (let i = pathSegments.length - 1; i > 0; i--) {\r\n    // If there is a .., remove the .. and the directory before it\r\n    if (pathSegments[i] === '..') {\r\n      pathSegments.splice(i - 1, 2);\r\n      i--;\r\n    }\r\n    // If we find ROOT_PATH, use that and forward and nothing before it (start path over at root)\r\n    else if (pathSegments[i] === ROOT_PATH) {\r\n      pathSegments.splice(0, i);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Get the first path so we can use it without putting a delimiter before it\r\n  const [basePath, ...remainingPaths] = pathSegments;\r\n\r\n  return remainingPaths.reduce((joinedPath, currentPath) => {\r\n    return `${joinedPath}${PATH_DELIMITER}${currentPath}`;\r\n  }, basePath);\r\n}\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Shared utility functions\r\n */\r\n\r\nimport Constants from 'expo-constants';\r\nimport { Platform } from 'react-native';\r\n\r\nexport const APP_VERSION = '0.0.0';\r\n\r\nexport function isWeb() {\r\n  return Platform.OS === 'web';\r\n}\r\n\r\n/** Returns true if running in expo go (or toggled on/off since then) */\r\nexport function isDev() {\r\n  // Constants.debugMode is true only on web in expo go\r\n  // Constants.expoGoConfig is populated in expo go on any device but null in preview builds. Populated in production build :(\r\n  // Constants.executionEnvironment is 'bare' on web in expo go and when built preview\r\n  //  but 'storeClient' when on android in expo go\r\n  return !!Constants.debugMode;\r\n}\r\n\r\n/**\r\n * Returns true if this app should use variable font\r\n *\r\n * React Native does not support variable fonts. Since the target is React Native,\r\n * we will ignore the fact that web does support variable fonts for consistency\r\n *\r\n * More info at https://github.com/expo/expo/issues/9149\r\n */\r\nexport function supportsVariableFont() {\r\n  return false // Platform.OS === 'web';\r\n}\r\n\r\n/**\r\n * Transforms the string into its superscript unicode equivalent. Currently only works with 0-9.\r\n *\r\n * Thanks for the idea to sinewave440hz at https://stackoverflow.com/a/45832410\r\n * Thanks to https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts for the unicodes\r\n */\r\nexport function sup(str: string) {\r\n  return str\r\n    .replace(/0/g, '\\u2070')\r\n    .replace(/1/g, '\\u00B9')\r\n    .replace(/2/g, '\\u00B2')\r\n    .replace(/3/g, '\\u00B3')\r\n    .replace(/4/g, '\\u2074')\r\n    .replace(/5/g, '\\u2075')\r\n    .replace(/6/g, '\\u2076')\r\n    .replace(/7/g, '\\u2077')\r\n    .replace(/8/g, '\\u2078')\r\n    .replace(/9/g, '\\u2079');\r\n}\r\n\r\n/**\r\n * Determine whether the object is a string\r\n * @param o object to determine if it is a string\r\n * @returns true if the object is a string; false otherwise\r\n *\r\n * Thanks to DRAX at https://stackoverflow.com/a/9436948\r\n */\r\nexport function isString(o: unknown): o is string {\r\n  return typeof o === 'string' || o instanceof String;\r\n}\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * ScreenService.ts - Handles getting the page structure\r\n */\r\n\r\nimport { ViewStyle } from 'react-native';\r\nimport { ContentListData } from '../components/contents/ContentList';\r\nimport { ContentData } from '../components/contents/Contents';\r\nimport { HeaderContentData } from '../components/contents/Header';\r\nimport { ContentListScreenData } from '../components/screens/ContentListScreen';\r\nimport {\r\n  SerializedAppData,\r\n  ScreenData,\r\n  AppData,\r\n  ScreenMap,\r\n} from '../components/screens/Screens';\r\nimport { ROOT_PATH, PATH_DELIMITER, pathJoin } from '../util/PathUtil';\r\nimport { APP_VERSION, isDev } from '../util/Util';\r\n\r\nconst serializedAppDataNew: SerializedAppData = require('../../assets/data/screens.json');\r\n\r\n/** Screen data for software license info. Accessed on path `app:/__licenses` */\r\nconst licensesScreen = require('../../assets/data/licenses/licenses.json');\r\n\r\nfunction assertScreenIdIsValid(screenId: string) {\r\n  if (!screenId)\r\n    throw new Error(\r\n      `Screen id ${screenId} is not valid! Must provide a non-empty string`,\r\n    );\r\n  if (screenId === '..')\r\n    throw new Error(\r\n      `Screen id ${screenId} is not valid! Cannot use reserved words`,\r\n    );\r\n  if (screenId.includes(PATH_DELIMITER))\r\n    throw new Error(\r\n      `Screen id ${screenId} is not valid! Cannot use ${PATH_DELIMITER} in screen id`,\r\n    );\r\n}\r\n\r\n/**\r\n * Recursively copies screens over to screenMap following down currentPath\r\n * @param screenMap map to add screens to\r\n * @param currentPath path to add current screens to\r\n * @param screens screens to add to the screenMap. Note that these are cloned and modified\r\n * @returns screenMap\r\n */\r\nfunction addSubscreensToMap(\r\n  screenMap: ScreenMap,\r\n  currentPath: string,\r\n  screens: ScreenData[] | undefined,\r\n): ScreenMap {\r\n  screens?.forEach(screen => {\r\n    assertScreenIdIsValid(screen.id);\r\n\r\n    const screenPath = pathJoin(currentPath, screen.id);\r\n\r\n    if (screenMap.has(screenPath))\r\n      throw new Error(`Duplicate screen path! ${screenPath}`);\r\n\r\n    const screenClone = { ...screen };\r\n\r\n    screenMap.set(screenPath, screenClone);\r\n\r\n    // Preserve original id as title if a title was not provided\r\n    if (!screenClone.title && screenClone.title !== '')\r\n      screenClone.title = screenClone.id;\r\n\r\n    // Overwrite the existing id with the full path\r\n    screenClone.id = screenPath;\r\n\r\n    addSubscreensToMap(screenMap, screenPath, screenClone.subscreens);\r\n  });\r\n\r\n  return screenMap;\r\n}\r\n\r\n/**\r\n * Transforms saved app data into a format we can use in the app.\r\n *\r\n * Primarily maps subscreens into their own screens\r\n *\r\n * @param appData the serialized app data to transform\r\n * @returns app data to use in the app\r\n */\r\nfunction deserializeAppData(appData: SerializedAppData): AppData {\r\n  const deserializedAppData = {\r\n    ...appData,\r\n    initialScreen: pathJoin(ROOT_PATH, appData.initialScreen),\r\n    screens: addSubscreensToMap(new Map<string, ScreenData>(), ROOT_PATH, [\r\n      ...appData.screens,\r\n      licensesScreen,\r\n    ]),\r\n  };\r\n\r\n  // If we're in development, add a red border around the title screen header\r\n  if (isDev()) {\r\n    const initialScreen = deserializedAppData.screens.get(\r\n      deserializedAppData.initialScreen,\r\n    ) as ContentListScreenData;\r\n    if (initialScreen) {\r\n      const header = initialScreen.contents[0] as HeaderContentData;\r\n      header.style = {\r\n        borderColor: '#FF0000',\r\n        borderWidth: 5,\r\n        ...(header.style as ViewStyle),\r\n      };\r\n    }\r\n  }\r\n\r\n  return deserializedAppData;\r\n}\r\n\r\nconst appScreens = deserializeAppData(serializedAppDataNew);\r\n\r\nexport const getAppScreens = () => appScreens;\r\n\r\n/**\r\n * Get the information a screen needs to display\r\n * @param path The screen path to get (aka screen id)\r\n * @returns Screen information\r\n */\r\nexport const getScreenData = (path: string): ScreenData =>\r\n  appScreens.screens.get(path) || ({ id: 'NOT_FOUND' } as ScreenData);\r\n\r\nfunction forEachContentOfContents(\r\n  contents: ContentData[],\r\n  callback: (content: ContentData) => void,\r\n) {\r\n  if (!contents) return;\r\n\r\n  contents.forEach(content => {\r\n    if (!content) return;\r\n\r\n    callback(content);\r\n    if ((content as ContentListData).contents)\r\n      forEachContentOfContents((content as ContentListData).contents, callback);\r\n  });\r\n}\r\n\r\n/** Runs a callback on every content in the screens recursively */\r\nexport function forEachContent(callback: (content: ContentData) => void) {\r\n  appScreens.screens.forEach(screen => {\r\n    if ((screen as ContentListScreenData).contents)\r\n      forEachContentOfContents(\r\n        (screen as ContentListScreenData).contents,\r\n        callback,\r\n      );\r\n  });\r\n}\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { ColorValue, StyleSheet } from 'react-native';\r\n\r\ntype Colors = {\r\n  app: {\r\n    background: string;\r\n  };\r\n  navigation: {\r\n    background: string;\r\n    text: string;\r\n    bottom: string;\r\n  };\r\n  header: {\r\n    background: string;\r\n    headerText: string;\r\n    subheaderText: string;\r\n    lineText: string;\r\n    bottom: string;\r\n  };\r\n  slide: {\r\n    background: string;\r\n    headerText: string;\r\n    headerTextPrimary: string;\r\n    bottom: string;\r\n  };\r\n  button: {\r\n    background: string;\r\n    text: string;\r\n    backgroundAnswer: string;\r\n    textAnswer: string;\r\n  };\r\n  text: {\r\n    headerText: string;\r\n    subheaderText: string;\r\n    lineText: string;\r\n  };\r\n};\r\n\r\ntype ColorMap = {\r\n  [theme: string]: Colors;\r\n};\r\n\r\nexport const themes: ColorMap = require('../assets/data/colors.json');\r\n\r\nconst theme: Colors = themes['light'];\r\n\r\nexport default theme;\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Functions related to creating DesignStyleSheets\r\n */\r\n\r\nimport { ImageStyle, StyleSheet, TextStyle, ViewStyle } from 'react-native';\r\n\r\n/** Internal type from react-native. Type used in StyleSheet.create. Enables intellisense on styles */\r\ntype NamedStyles<T> = { [P in keyof T]: ViewStyle | TextStyle | ImageStyle };\r\n\r\n/** Style sheet for a specific design that extends other designs */\r\ntype DesignStyleSheet<D extends string, T> = Partial<NamedStyles<T>> & {\r\n  /** Which designs to extend. Automatically includes base style. Can only list designs above the current design */\r\n  // Used to be D[], but then TypeScript was defining D on this instead of on the DesignStyleSheetExtensions's object keys\r\n  extends?: string[];\r\n};\r\n\r\n/** All designs for a style sheet design composition */\r\ntype DesignStyleSheetExtensions<D extends string, T> = {\r\n  [name in D]: DesignStyleSheet<D, T>;\r\n};\r\n\r\n/** All designs for a component indexed by name */\r\ntype DesignStyleSheetComposition<T> = {\r\n  [name: string]: T;\r\n};\r\n\r\n/**\r\n * Create a design style sheet composition from a base style and style extensions.\r\n * Gives you an object you can use to get a stylesheet customized for the design you input\r\n * @param baseStyles base set of styles to apply to any design\r\n * @param extensions named sets of styles to apply over the base to make a design (use extends to extend other designs too)\r\n * @returns object whose members consist of design style sheets at each design name. Any design not found will revert to baseStyles.\r\n */\r\nexport const createDesignStyleSheets = <\r\n  D extends string,\r\n  T extends NamedStyles<T>,\r\n>(\r\n  baseStyles: NamedStyles<T>,\r\n  // T & {} lowers type inference priority so T is inferred from baseStyles instead. Thanks to jcalz at https://stackoverflow.com/a/59055819\r\n  extensions: DesignStyleSheetExtensions<D, T & {}>,\r\n): DesignStyleSheetComposition<T> => {\r\n  const baseStyleSheet = StyleSheet.create(baseStyles);\r\n\r\n  // Create a proxied design style sheet composition that returns baseStyles as the default design if the specific design is not found\r\n  const designStyleSheets: DesignStyleSheetComposition<T> = new Proxy(\r\n    Object.fromEntries(\r\n      Object.entries(extensions).map(([name, dSS]) => {\r\n        // Not sure why TypeScript drops the type here on Object.entries() on extensions\r\n        const designStyleSheet = dSS as DesignStyleSheet<D, T>;\r\n\r\n        // Assemble an array of the style sheet objects for the sheets to extend\r\n        const overlaySheets = designStyleSheet.extends\r\n          ? [\r\n              ...designStyleSheet.extends.map(\r\n                extensionName => extensions[extensionName as D],\r\n              ),\r\n              designStyleSheet,\r\n            ]\r\n          : [designStyleSheet];\r\n\r\n        // Reduce the sheets together, overwriting entries\r\n        return [\r\n          name,\r\n          StyleSheet.create(\r\n            // Lay each sheet over the previous ones\r\n            overlaySheets.reduce(\r\n              (overlaidSheet, currentSheet) =>\r\n                Object.fromEntries(\r\n                  // For each style in baseStyles, create a new style by combining its styles with the current design's styles\r\n                  Object.keys(baseStyles).map(styleName => {\r\n                    const overlaidStyle =\r\n                      overlaidSheet[styleName as keyof T] ?? {};\r\n                    const currentStyle =\r\n                      currentSheet[styleName as keyof T] ?? {};\r\n                    return [\r\n                      styleName as keyof T,\r\n                      {\r\n                        ...overlaidStyle,\r\n                        ...currentStyle,\r\n                      },\r\n                    ];\r\n                  }),\r\n                ) as unknown as T,\r\n              baseStyles,\r\n            ),\r\n          ),\r\n        ];\r\n      }),\r\n    ),\r\n    {\r\n      // If the design is not found, return the base styles\r\n      get(designStyleSheetComposition, design: string) {\r\n        return design in designStyleSheetComposition\r\n          ? designStyleSheetComposition[design]\r\n          : baseStyleSheet;\r\n      },\r\n    },\r\n  );\r\n\r\n  return designStyleSheets;\r\n};\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React from 'react';\r\nimport { StyleProp, Text as ReactText, TextStyle } from 'react-native';\r\nimport theme from '../../Theme';\r\nimport { createDesignStyleSheets } from '../../util/DesignStyleSheets';\r\nimport { ContentDataBase } from './Contents';\r\nimport { supportsVariableFont, isString } from '../../util/Util';\r\nimport { GestureResponderEvent } from 'react-native';\r\n\r\nconst DEFAULT_FONT_FAMILY = 'OpenSauceOne';\r\n\r\n/** The base data that every text object must have. All text data object data types should extend TextDataObjectBase */\r\nexport type TextDataObjectBase = { text: string };\r\n\r\n/** Simple defining data for displaying text */\r\nexport interface TextContentDataObject\r\n  extends ContentDataBase,\r\n    TextDataObjectBase {\r\n  type: 'Text';\r\n  design?: TextDesign;\r\n  style?: StyleProp<TextStyle>;\r\n}\r\n\r\n/** Defining data for displaying text, either an object describing the text or just a string */\r\nexport type TextContentData = TextContentDataObject | string;\r\n\r\ntype TextDesign = 'normal' | 'header' | 'subheader' | 'small';\r\n\r\n/** Data that defines Text but without the type */\r\nexport type TextDataObject = Omit<TextContentDataObject, 'type'>;\r\n\r\n/**\r\n * Data that defines Text but without the type.\r\n * Either an object describing the text or just a string.\r\n * (useful when you want to use Text in another component)\r\n */\r\nexport type TextData = TextDataObject | string;\r\n\r\n/** The base props that every text object should have and pass down to the text inside. All text data object props should extend TextPropsBase */\r\nexport type TextPropsBase = {\r\n  onPress?: (event: GestureResponderEvent) => void;\r\n};\r\n\r\n/** Props the Text needs to function */\r\nexport type TextProps = TextData & TextPropsBase;\r\n\r\n// Have to bake out any optional parameter into specifically defined for TypeScript to realize we provided it\r\nconst DEFAULT_PROPS: Omit<TextDataObject, 'design' | 'text'> & {\r\n  design: TextDesign;\r\n} = {\r\n  design: 'normal',\r\n};\r\n\r\n/**\r\n * Format the input text data to make sure it is a TextObjectData object we can destructure\r\n * @param textData TextData object or string to format into a TextObjectData\r\n * @returns if textData is a string, returns textData wrapped to be a TextObjectData, returns textData otherwise\r\n *\r\n * WARNING: This asserts the textData string into type T. If the text data object type in use has other necessary properties, it would\r\n * probably be best to make a new version of this function specific to that text data object type\r\n */\r\nexport const getTextDataObject = <T extends TextDataObjectBase | string>(\r\n  textData: T,\r\n): Exclude<T, string> => {\r\n  return (isString(textData) ? { text: textData } : textData) as Exclude<\r\n    T,\r\n    string\r\n  >;\r\n};\r\n\r\nexport const Text = (props: TextProps) => {\r\n  const { text, design, style, onPress } = {\r\n    ...DEFAULT_PROPS,\r\n    ...getTextDataObject(props),\r\n  };\r\n\r\n  const designStyle = designStyles[design];\r\n  let styles = [designStyle.lineText, style];\r\n\r\n  // Bake font styles into the family on iOS\r\n  if (!supportsVariableFont()) {\r\n    // Flatten styles to make them easier to deal with\r\n    // Assert so we don't have weird problems with readonly entries in the array\r\n    styles = styles.flat(5) as TextStyle[];\r\n\r\n    // Find the highest-precedence font family, weight, and italic\r\n    let highestStyleIndex = -1;\r\n    let highestFontFamily: TextStyle['fontFamily'] = undefined;\r\n    let highestFontWeight: TextStyle['fontWeight'] = undefined;\r\n    let highestFontStyle: TextStyle['fontStyle'] = undefined;\r\n    for (let i = styles.length - 1; i >= 0; i--) {\r\n      const styleEntry = styles[i];\r\n      if (!styleEntry || typeof styleEntry !== 'object' || styleEntry === null)\r\n        continue;\r\n\r\n      // Keep track of the highest actual TextStyle so we can set the font properties on it\r\n      if (highestStyleIndex < 0) highestStyleIndex = i;\r\n\r\n      const { fontWeight, fontStyle, fontFamily, ...textStyle } =\r\n        styleEntry as TextStyle;\r\n\r\n      // Remove these extra properties because they supposedly cause issues just being on the style at all\r\n      styles[i] = textStyle;\r\n\r\n      if (fontFamily && !highestFontFamily) highestFontFamily = fontFamily;\r\n      if (fontWeight && !highestFontWeight) highestFontWeight = fontWeight;\r\n      if (fontStyle && !highestFontStyle) highestFontStyle = fontStyle;\r\n\r\n      if (highestFontFamily && highestFontWeight && highestFontStyle) break;\r\n    }\r\n\r\n    // If we found some font styles to set\r\n    if (highestFontFamily || highestFontWeight || highestFontStyle) {\r\n      // Set font family to default if we didn't find one\r\n      if (!highestFontFamily) highestFontFamily = DEFAULT_FONT_FAMILY;\r\n\r\n      // Set up the font family we're supposed to use\r\n      const weight = parseInt(highestFontWeight || '');\r\n      // normal is 400, and bold is 700\r\n      const isBold =\r\n        highestFontWeight === 'bold' ||\r\n        (!Number.isNaN(weight) && weight >= 700);\r\n      const isItalic = highestFontStyle === 'italic';\r\n      const styledFontFamily = `${highestFontFamily}${isBold ? '_bold' : ''}${\r\n        isItalic ? '_italic' : ''\r\n      }`;\r\n\r\n      if (highestStyleIndex < 0) {\r\n        // If we didn't find an actual TextStyle, warn that this is unexpected. Please investigate\r\n        console.warn(\r\n          `Unexpectedly found font styling but not an actual TextStyle object (please investigate), so adding new font style object for text ${text}`,\r\n        );\r\n        styles.push({\r\n          fontFamily: styledFontFamily,\r\n        } as TextStyle);\r\n      } else {\r\n        // We found a TextStyle to put the font styles on. Put them on\r\n        styles[highestStyleIndex] = {\r\n          ...(styles[highestStyleIndex] as TextStyle),\r\n          fontFamily: styledFontFamily,\r\n        } as TextStyle;\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ReactText onPress={onPress} style={styles}>\r\n      {text}\r\n    </ReactText>\r\n  );\r\n};\r\n\r\nconst designStyles = createDesignStyleSheets(\r\n  {\r\n    lineText: {\r\n      fontFamily: DEFAULT_FONT_FAMILY,\r\n      fontSize: 20,\r\n      color: theme.text.lineText,\r\n    },\r\n  },\r\n  {\r\n    header: {\r\n      lineText: {\r\n        fontFamily: 'LibreFranklin',\r\n        fontSize: 30,\r\n        fontWeight: '900',\r\n        color: theme.text.headerText,\r\n      },\r\n    },\r\n    subheader: {\r\n      lineText: {\r\n        fontSize: 16,\r\n        color: theme.text.subheaderText,\r\n      },\r\n    },\r\n    small: {\r\n      lineText: {\r\n        fontSize: 17,\r\n      },\r\n    },\r\n  },\r\n);\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React from 'react';\r\nimport { Text, TextDataObject, TextPropsBase, getTextDataObject } from './Text';\r\n\r\n/** Simple defining data for displaying header text */\r\ntype HeaderTextContentDataObject = Omit<TextDataObject, 'design'> & {\r\n  type: 'HeaderText';\r\n};\r\n\r\n/** Defining data for displaying header text, either an object describing the text or just a string */\r\nexport type HeaderTextContentData = HeaderTextContentDataObject | string;\r\n\r\n/** Data that defines HeaderText but without the type */\r\nexport type HeaderTextDataObject = Omit<HeaderTextContentDataObject, 'type'>;\r\n\r\n/**\r\n * Data that defines HeaderText but without the type.\r\n * Either an object describing the text or just a string.\r\n * (useful when you want to use HeaderText in another component)\r\n */\r\nexport type HeaderTextData = HeaderTextDataObject | string;\r\n\r\n/** Props the HeaderText needs to function */\r\nexport type HeaderTextProps = HeaderTextData & TextPropsBase;\r\n\r\nexport const HeaderText = (props: HeaderTextProps) => {\r\n  const textDataObject = getTextDataObject(props);\r\n  return (\r\n    <Text {...textDataObject} design=\"header\" style={[textDataObject.style]} />\r\n  );\r\n};\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React from 'react';\r\nimport { Text, TextDataObject, TextPropsBase, getTextDataObject } from './Text';\r\n\r\n/** Simple defining data for displaying subheader text */\r\ntype SubheaderTextContentDataObject = Omit<TextDataObject, 'design'> & {\r\n  type: 'HeaderText';\r\n};\r\n\r\n/** Defining data for displaying subheader text, either an object describing the text or just a string */\r\nexport type SubheaderTextContentData = SubheaderTextContentDataObject | string;\r\n\r\n/** Data that defines HeaderText but without the type */\r\nexport type SubheaderTextDataObject = Omit<\r\n  SubheaderTextContentDataObject,\r\n  'type'\r\n>;\r\n\r\n/**\r\n * Data that defines HeaderText but without the type.\r\n * Either an object describing the text or just a string.\r\n * (useful when you want to use HeaderText in another component)\r\n */\r\nexport type SubheaderTextData = SubheaderTextDataObject | string;\r\n\r\n/** Props the HeaderText needs to function */\r\nexport type SubheaderTextProps = SubheaderTextData & TextPropsBase;\r\n\r\nexport const SubheaderText = (textData: SubheaderTextData) => {\r\n  const textDataObject = getTextDataObject(textData);\r\n  return (\r\n    <Text\r\n      {...textDataObject}\r\n      design=\"subheader\"\r\n      style={[textDataObject.style]}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React from 'react';\r\nimport { View, ViewStyle, StyleProp } from 'react-native';\r\nimport theme from '../../Theme';\r\nimport { createDesignStyleSheets } from '../../util/DesignStyleSheets';\r\nimport { ContentDataBase } from './Contents';\r\nimport { HeaderText, HeaderTextData } from './HeaderText';\r\nimport { SubheaderText, SubheaderTextData } from './SubheaderText';\r\nimport { Text, TextData, getTextDataObject } from './Text';\r\n\r\nexport interface HeaderContentData extends ContentDataBase {\r\n  type: 'Header';\r\n  headerText: HeaderTextData;\r\n  subheaderText?: SubheaderTextData;\r\n  lineTexts?: TextData[];\r\n  design?: HeaderDesign;\r\n  style?: StyleProp<ViewStyle>;\r\n}\r\n\r\ntype HeaderDesign = 'screen' | 'section' | 'title';\r\n\r\n/**\r\n * Data that defines Header but without the type\r\n * (useful when you want to use Header in another component)\r\n */\r\nexport type HeaderData = Omit<HeaderContentData, 'type'>;\r\n\r\n/** Props the Header needs to function */\r\nexport interface HeaderProps extends HeaderData {}\r\n\r\nexport const Header = ({\r\n  headerText,\r\n  subheaderText,\r\n  lineTexts = [],\r\n  design = 'screen',\r\n  style,\r\n}: HeaderProps) => {\r\n  const designStyle = designStyles[design];\r\n  const headerTextObject = getTextDataObject(headerText);\r\n  const subheaderTextObject = subheaderText\r\n    ? getTextDataObject(subheaderText)\r\n    : undefined;\r\n  return (\r\n    <View style={[designStyle.headerView, style]}>\r\n      <HeaderText\r\n        {...headerTextObject}\r\n        style={[designStyle.headerText, headerTextObject.style]}\r\n      />\r\n      {subheaderTextObject && (\r\n        <SubheaderText\r\n          {...subheaderTextObject}\r\n          style={[designStyle.subheaderText, subheaderTextObject.style]}\r\n        />\r\n      )}\r\n      {lineTexts.map(lineText => {\r\n        const lineTextObject = getTextDataObject(lineText);\r\n        return (\r\n          <Text\r\n            key={lineTextObject.text}\r\n            {...lineTextObject}\r\n            style={[designStyle.lineText, lineTextObject.style]}\r\n          />\r\n        );\r\n      })}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst designStyles = createDesignStyleSheets(\r\n  {\r\n    headerView: {\r\n      paddingTop: 60,\r\n      paddingBottom: 40,\r\n      backgroundColor: theme.header.background,\r\n      paddingHorizontal: 15,\r\n      width: '100%',\r\n      borderBottomWidth: 10,\r\n      borderBottomColor: theme.header.bottom,\r\n    },\r\n    headerText: {\r\n      textAlign: 'center',\r\n      color: theme.header.headerText,\r\n    },\r\n    subheaderText: {\r\n      marginTop: 5,\r\n      textAlign: 'center',\r\n      color: theme.header.subheaderText,\r\n    },\r\n    lineText: {\r\n      marginTop: 20,\r\n      textAlign: 'center',\r\n      color: theme.header.lineText,\r\n    },\r\n  },\r\n  {\r\n    screen: {\r\n      headerView: {\r\n        paddingTop: 15,\r\n        paddingBottom: 15,\r\n      },\r\n      headerText: {\r\n        fontWeight: '700',\r\n        fontSize: 25,\r\n      },\r\n    },\r\n    section: {\r\n      extends: ['screen'],\r\n      headerView: {\r\n        width: '90%',\r\n      },\r\n    },\r\n  },\r\n);\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React, { ReactNode } from 'react';\r\nimport { TouchableOpacity, GestureResponderEvent } from 'react-native';\r\nimport theme from '../../../Theme';\r\nimport { createDesignStyleSheets } from '../../../util/DesignStyleSheets';\r\nimport { Text, TextData, getTextDataObject } from '../Text';\r\nimport { ButtonDataBase } from './Buttons';\r\n\r\n/** The data that defines the BasicButton */\r\nexport interface BasicButtonData extends ButtonDataBase {\r\n  type: 'BasicButton';\r\n}\r\n\r\n/** Props the BasicButton needs to function */\r\nexport interface BasicButtonProps extends Omit<BasicButtonData, 'type'> {\r\n  onPress?: (event: GestureResponderEvent) => void;\r\n  children?: ReactNode;\r\n}\r\n\r\n// TODO: Consider reworking with Pressable https://reactnative.dev/docs/pressable\r\n\r\nexport const BasicButton = ({\r\n  onPress,\r\n  design = 'normal',\r\n  style,\r\n  text = {} as TextData,\r\n  children,\r\n}: BasicButtonProps) => {\r\n  const designStyle = designStyles[design];\r\n  const textObject = getTextDataObject(text);\r\n\r\n  return (\r\n    <TouchableOpacity style={[designStyle.navButton, style]} onPress={onPress}>\r\n      {children ? (\r\n        children\r\n      ) : (\r\n        <Text\r\n          {...textObject}\r\n          style={[designStyle.navButtonText, textObject.style]}\r\n        />\r\n      )}\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst designStyles = createDesignStyleSheets(\r\n  {\r\n    navButton: {\r\n      backgroundColor: theme.button.background,\r\n      padding: 12,\r\n      borderRadius: 12,\r\n      width: '75%',\r\n    },\r\n    navButtonText: {\r\n      color: theme.button.text,\r\n      fontSize: 22,\r\n      textAlign: 'center',\r\n    },\r\n  },\r\n  {\r\n    answer: {\r\n      navButton: {\r\n        backgroundColor: theme.button.backgroundAnswer,\r\n        padding: 10,\r\n        borderRadius: 6,\r\n        width: 'auto',\r\n      },\r\n      navButtonText: {\r\n        color: theme.button.textAnswer,\r\n        fontSize: 17,\r\n      },\r\n    },\r\n  },\r\n);\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport { RouteProp } from '@react-navigation/native';\r\nimport { pathJoin } from './PathUtil';\r\nimport { openURL } from 'expo-linking';\r\nimport { isWeb } from './Util';\r\n\r\n//----- ACTION TYPES -----//\r\n\r\n/** The base data for an action to perform. All action types should extend ActionDataBase */\r\nexport type ActionDataBase = {\r\n  type: ActionType;\r\n};\r\n\r\n/** Generic props passed down that allow access to navigation */\r\nexport type PropsWithNavigation<T> = T & {\r\n  navigation: NativeStackNavigationProp<any>;\r\n  route: RouteProp<any>;\r\n};\r\n\r\n/** Mapping from an action type to a function factory for that action given the ActionProps provided */\r\nexport const ActionFactory: {\r\n  // Note on PropsWithNavigation<any>: I tried <T extends ActionDataBase> and making this PropsWithNavigation<T>, but TypeScript\r\n  // currently does not narrow generic types according to their use: https://stackoverflow.com/a/67378667\r\n  // All action parameters should be PropsWithNavigation<T extends ActionDataBase>.\r\n  [actionType: string]: (\r\n    action: PropsWithNavigation<any>,\r\n  ) => (params: any) => void;\r\n} = {\r\n  navigate:\r\n    ({ to, navigation, route }: PropsWithNavigation<NavigateActionData>) =>\r\n    () => {\r\n      navigation.navigate(pathJoin(route.name, to));\r\n    },\r\n  link:\r\n    ({ to }: PropsWithNavigation<LinkActionData>) =>\r\n    async () => {\r\n      if (to) {\r\n        // Fix the discipleship%2Dapp%2Dtemplate link that is encoded to prevent accidental replacement when customizing the template\r\n        const toUrl = to?.includes('discipleship%2Dapp%2Dtemplate')\r\n          ? to.replace(/%2D/g, '-')\r\n          : to;\r\n        if (isWeb()) window.open(toUrl, '_blank');\r\n        else openURL(toUrl);\r\n      }\r\n    },\r\n};\r\n\r\n/** All available action types. An action is a function that does something based on the data that defines it */\r\nexport type ActionType = keyof typeof ActionFactory;\r\n\r\n/** The data that defines an action that navigates to the specified screen */\r\nexport type NavigateActionData = {\r\n  type: 'navigate';\r\n  to: string;\r\n} & ActionDataBase;\r\n\r\n/** The data that defines an action to open a link */\r\nexport type LinkActionData = {\r\n  type: 'link';\r\n  to: string;\r\n} & ActionDataBase;\r\n\r\n/** Defining data for every action type. All action types should extend ActionDataBase  */\r\nexport type ActionData = NavigateActionData | LinkActionData;\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React, { useMemo } from 'react';\r\nimport { BasicButton } from './BasicButton';\r\nimport { ActionData, ActionFactory } from '../../../util/ActionFactory';\r\nimport { ButtonDataBase } from './Buttons';\r\nimport { useNavigation, useRoute } from '@react-navigation/native';\r\nimport { TextData, getTextDataObject } from '../Text';\r\n\r\n/** The data that defines the ActionButton */\r\nexport interface ActionButtonData extends ButtonDataBase {\r\n  type: 'ActionButton';\r\n  action?: ActionData;\r\n}\r\n\r\n/** Props the ActionButton needs to function */\r\nexport interface ActionButtonProps extends Omit<ActionButtonData, 'type'> {}\r\n\r\n/** Button that performs an action when clicked */\r\nexport const ActionButton = (props: ActionButtonProps) => {\r\n  const { action, ...buttonData } = props;\r\n  const navigation = useNavigation();\r\n  const route = useRoute();\r\n\r\n  // Set up text style with underline for `link` action type\r\n  const textObject = useMemo<TextData | undefined>(() => {\r\n    if (!action || action.type !== 'link' || !buttonData.text)\r\n      return buttonData.text;\r\n\r\n    const buttonTextObject = getTextDataObject(buttonData.text);\r\n    return {\r\n      text: buttonTextObject.text,\r\n      style: {\r\n        textDecorationLine: 'underline',\r\n        // StyleProp won't spread, so I'm just going to assert this\r\n        ...(buttonTextObject.style as object),\r\n      },\r\n    };\r\n  }, []);\r\n\r\n  let onPress = action\r\n    ? ActionFactory[action.type]({ ...action, navigation, route })\r\n    : undefined;\r\n\r\n  return <BasicButton {...buttonData} text={textObject} onPress={onPress} />;\r\n};\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport { ActionButton, ActionButtonData } from './buttons/ActionButton';\r\nimport { ContentDataBase } from './Contents';\r\nimport { getTextDataObject } from './Text';\r\n\r\n/** The data that defines the ButtonList */\r\nexport interface ButtonListContentData extends ContentDataBase {\r\n  type: 'ButtonList';\r\n  buttons: ActionButtonData[];\r\n}\r\n\r\n/**\r\n * Data that defines ButtonList but without the type\r\n * (useful when you want to use ButtonList in another component)\r\n */\r\nexport type ButtonListData = Omit<ButtonListContentData, 'type'>;\r\n\r\n/** Props the ButtonList needs to function */\r\nexport interface ButtonListProps extends ButtonListData {}\r\n\r\nexport const ButtonList = ({ buttons }: ButtonListProps) => {\r\n  return (\r\n    <>\r\n      {buttons.map((button, i) => (\r\n        <ActionButton\r\n          key={button.text ? getTextDataObject(button.text).text || i : i}\r\n          {...button}\r\n          style={[styles.button, button.style]}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    marginTop: 45,\r\n  },\r\n});\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { ScrollView, ScrollViewProps } from 'react-native';\r\nimport { isWeb } from '../util/Util';\r\n\r\nexport type TScrollViewProps = ScrollViewProps & { bottomPadding?: number };\r\n\r\nexport default function TScrollView({\r\n  bottomPadding,\r\n  ...scrollViewProps\r\n}: TScrollViewProps) {\r\n  return (\r\n    <ScrollView\r\n      {...scrollViewProps}\r\n      // Bottom padding thanks to jgbaEmento at https://github.com/facebook/react-native/issues/15707#issuecomment-340759872\r\n      contentContainerStyle={[\r\n        {\r\n          paddingBottom: bottomPadding || 0,\r\n        },\r\n        scrollViewProps.contentContainerStyle,\r\n      ]}\r\n      showsVerticalScrollIndicator={\r\n        !isWeb() && scrollViewProps.showsVerticalScrollIndicator\r\n      }\r\n      showsHorizontalScrollIndicator={\r\n        !isWeb() && scrollViewProps.showsHorizontalScrollIndicator\r\n      }></ScrollView>\r\n  );\r\n}\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport React from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport { Header, HeaderData } from '../contents/Header';\r\nimport { ScreenDataBase } from './Screens';\r\nimport { getScreenData } from '../../services/ScreenService';\r\nimport { ButtonList, ButtonListData } from '../contents/ButtonList';\r\nimport TScrollView from '../TScrollView';\r\n\r\n/** The data that defines the HeaderWithButtons screen */\r\nexport type HeaderWithButtonsData = {\r\n  type: 'HeaderWithButtons';\r\n  headerData: HeaderData;\r\n  buttonListData: ButtonListData;\r\n} & ScreenDataBase;\r\n\r\n/** Screen with a header and a list of buttons */\r\nexport const HeaderWithButtons = ({\r\n  navigation,\r\n  route,\r\n}: NativeStackScreenProps<any>) => {\r\n  const { headerData, buttonListData } = getScreenData(\r\n    route.name,\r\n  ) as HeaderWithButtonsData;\r\n\r\n  return (\r\n    <TScrollView contentInsetAdjustmentBehavior=\"automatic\">\r\n      <View style={styles.layout}>\r\n        <Header {...headerData} />\r\n        <ButtonList {...buttonListData} />\r\n      </View>\r\n    </TScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  layout: {\r\n    flex: 1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { createContext } from 'react';\r\n\r\n// One day, wrap this in better context functions that do not expose the context and properly throw on using default value? Not particularly important in this case\r\n/**\r\n * Context that provides a list of Content components that may be displayed.\r\n * Used to remove the dependency cycle between ContentsList.tsx and Contents.ts\r\n */\r\nconst ContentsModuleContext = createContext<typeof import('./Contents')>(\r\n  // @ts-expect-error ts(2345) This context shouldn't have anything in it until it's filled in App.tsx\r\n  {},\r\n);\r\n\r\nexport default ContentsModuleContext;\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React, { useContext, useState } from 'react';\r\nimport { View, ViewStyle, StyleProp } from 'react-native';\r\nimport { createDesignStyleSheets } from '../../util/DesignStyleSheets';\r\nimport { ContentData, ContentDataBase } from './Contents';\r\nimport ContentsModuleContext from './ContentsContext';\r\nimport { isString } from '../../util/Util';\r\nimport {\r\n  TextContentDataObject,\r\n  TextDataObjectBase,\r\n  getTextDataObject,\r\n} from './Text';\r\n\r\nexport interface ContentListContentData extends ContentDataBase {\r\n  type: 'ContentList';\r\n  contents: ContentData[];\r\n  /** Whether this content list should control which openable contents are open. Defaults to true */\r\n  controlIsOpen?: boolean;\r\n  /** Which index of the openable contents to open by default. Set to -1 (default) to leave all closed. Only functional if `controlIsOpen` is true */\r\n  openIndexDefault?: number;\r\n  padTop?: boolean;\r\n  padBottom?: boolean;\r\n  padding?: number;\r\n  design?: ContentListDesign;\r\n  style?: StyleProp<ViewStyle>;\r\n}\r\n\r\nexport type ContentListDesign = keyof typeof ContentListDesignPadding;\r\n\r\nconst ContentListDesignPadding = {\r\n  'no-padding': 0,\r\n  tight: 15,\r\n  comfortable: 30,\r\n  loose: 45,\r\n};\r\nexport const getContentListDesignPadding = (\r\n  padding: number | undefined,\r\n  design: ContentListDesign = 'comfortable',\r\n) => (padding !== undefined ? padding : ContentListDesignPadding[design]);\r\n\r\n/**\r\n * Data that defines ContentList but without the type\r\n * (useful when you want to use ContentList in another component)\r\n */\r\nexport type ContentListData = Omit<ContentListContentData, 'type'>;\r\n\r\n/** Props the Slide needs to function */\r\nexport interface ContentListProps extends ContentListData {}\r\n\r\nexport const ContentList = ({\r\n  contents = [],\r\n  controlIsOpen = true,\r\n  openIndexDefault = -1,\r\n  padTop = true,\r\n  padBottom = true,\r\n  padding,\r\n  design = 'comfortable',\r\n  style,\r\n}: ContentListProps) => {\r\n  const { Contents, isOpenable } = useContext(ContentsModuleContext);\r\n\r\n  const designStyle = designStyles[design];\r\n  const contentPadding = getContentListDesignPadding(padding, design);\r\n\r\n  const [openIndex, setOpenIndex] = useState(openIndexDefault);\r\n\r\n  let openableIndex = -1;\r\n\r\n  return (\r\n    <View\r\n      style={[\r\n        designStyle.layout,\r\n        {\r\n          marginTop: padTop ? contentPadding : undefined,\r\n          gap: contentPadding,\r\n          marginBottom: padBottom ? contentPadding : undefined,\r\n        },\r\n        style,\r\n      ]}>\r\n      {contents.map((content, i) => {\r\n        // Get full content data for this content (if it is a string, build it into a TextContentData)\r\n        const contentObject = isString(content)\r\n          ? ({\r\n              type: 'Text',\r\n              ...(getTextDataObject(content) as TextDataObjectBase),\r\n            } as TextContentDataObject)\r\n          : content;\r\n\r\n        const openObject: {\r\n          isOpen?: boolean;\r\n          onChange?: (isOpening: boolean) => void;\r\n        } = {};\r\n        // TODO: Make this openable check a function from Contents.tsx\r\n        if (controlIsOpen && isOpenable(contentObject)) {\r\n          openableIndex += 1;\r\n          const thisOpenableIndex = openableIndex;\r\n          openObject.isOpen = openIndex === openableIndex;\r\n          openObject.onChange = isOpening =>\r\n            isOpening ? setOpenIndex(thisOpenableIndex) : setOpenIndex(-1);\r\n        }\r\n\r\n        return React.createElement(Contents[contentObject.type], {\r\n          // TODO: Consider adding a key to ContentDataBase?\r\n          key: i,\r\n          ...contentObject,\r\n          ...openObject,\r\n        });\r\n      })}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst designStyles = createDesignStyleSheets(\r\n  {\r\n    layout: { width: '100%', alignItems: 'center' },\r\n  },\r\n  {},\r\n);\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport React from 'react';\r\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\r\nimport { ScreenDataBase } from './Screens';\r\nimport { getScreenData } from '../../services/ScreenService';\r\nimport { ContentData, Contents } from '../contents/Contents';\r\nimport TScrollView from '../TScrollView';\r\nimport {\r\n  ContentList,\r\n  ContentListData,\r\n  getContentListDesignPadding,\r\n} from '../contents/ContentList';\r\n\r\n/** The data that defines the ContentListScreen screen */\r\nexport type ContentListScreenData = {\r\n  type: 'ContentListScreen';\r\n} & ContentListData &\r\n  ScreenDataBase;\r\n\r\n/** Screen with a header and a list of buttons */\r\nexport const ContentListScreen = ({\r\n  navigation,\r\n  route,\r\n}: NativeStackScreenProps<any>) => {\r\n  // Default spaceFirst and spaceLast to false instead of true like in ContentList\r\n  const {\r\n    padTop = false,\r\n    padBottom = false,\r\n    ...screenData\r\n  } = getScreenData(route.name) as ContentListScreenData;\r\n\r\n  return (\r\n    <TScrollView\r\n      bottomPadding={getContentListDesignPadding(\r\n        screenData.padding,\r\n        screenData.design,\r\n      )}\r\n      contentInsetAdjustmentBehavior=\"automatic\">\r\n      <ContentList {...screenData} padTop={padTop} padBottom={padBottom} />\r\n    </TScrollView>\r\n  );\r\n};\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\r\nimport { HeaderWithButtons, HeaderWithButtonsData } from './HeaderWithButtons';\r\nimport { ContentListScreen, ContentListScreenData } from './ContentListScreen';\r\n\r\n//----- SCREEN TYPES -----//\r\n\r\n/** All available screen components */\r\nexport const Screens: {\r\n  [pageType: string]: (props: NativeStackScreenProps<any>) => JSX.Element;\r\n} = {\r\n  HeaderWithButtons,\r\n  ContentListScreen,\r\n};\r\n\r\n/** Defining data for every screen type. All screen types should extend ScreenDataBase */\r\nexport type ScreenData = HeaderWithButtonsData | ContentListScreenData;\r\n\r\n/** All screen types available. A screen is a set of components that the Navigation handles */\r\nexport type ScreenType = keyof typeof Screens;\r\n\r\n/** The base data that every screen must have. All screen types should extend ScreenDataBase */\r\nexport interface ScreenDataBase {\r\n  /** ID that is unique among this screen's siblings */\r\n  id: string;\r\n  /** Text to show on the navigation bar */\r\n  title?: string;\r\n  /** Whether to show the navigation bar. Defaults to true */\r\n  showNavigationBar?: boolean;\r\n  /** Type of Screen */\r\n  type: ScreenType;\r\n  /** Screens that are children of this screen. Can navigate to them with an `ActionButton` */\r\n  subscreens?: ScreenData[];\r\n}\r\n\r\n//----- APP TYPES -----//\r\n\r\n/** Map of screen path to screen data at that path */\r\nexport type ScreenMap = Map<string, ScreenData>;\r\n\r\n/**\r\n * Saved data that defines the whole app.\r\n * Gets transformed into AppData on load.\r\n */\r\nexport interface SerializedAppData {\r\n  /** Version of the AppData object following https://semver.org/ rules */\r\n  version: string;\r\n  initialScreen: string;\r\n  screens: ScreenData[];\r\n}\r\n\r\n/**\r\n * Data that defines the whole app.\r\n * Transformed from SerializedAppData for use in the app.\r\n */\r\nexport interface AppData extends Omit<SerializedAppData, 'screens'> {\r\n  screens: ScreenMap;\r\n}\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { PropsWithChildren } from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport { isDev, isWeb } from '../util/Util';\r\n\r\n/**\r\n * Wraps the application in a \"phone\" layout on web for easy preview\r\n */\r\nexport default function WebWrapper({ children }: PropsWithChildren) {\r\n  return isWeb() && isDev() ? (\r\n    <View style={[styles.screen]}>\r\n      <View style={[styles.phone]}>{children}</View>\r\n    </View>\r\n  ) : (\r\n    <>{children}</>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    height: '100%',\r\n  },\r\n  phone: {\r\n    width: 360,\r\n    height: 720,\r\n    borderWidth: 3,\r\n    borderRadius: 3,\r\n  },\r\n});\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { BasicButton } from './BasicButton';\r\nimport { ButtonDataBase } from './Buttons';\r\n\r\n/** The data that defines the ActionButton */\r\nexport interface ToggleButtonData extends ButtonDataBase {\r\n  type: 'ToggleButton';\r\n  altButtons?: Omit<ButtonDataBase, 'type'>[];\r\n  loop?: boolean;\r\n}\r\n\r\n/** Props the ActionButton needs to function */\r\nexport interface ToggleButtonProps extends Omit<ToggleButtonData, 'type'> {}\r\n\r\n/** Button that toggles between different looks */\r\nexport const ToggleButton = (props: ToggleButtonProps) => {\r\n  const { altButtons, loop, ...buttonDataProps } = {\r\n    altButtons: [],\r\n    loop: true,\r\n    ...props,\r\n  };\r\n\r\n  /**\r\n   * Keep track of which button looks we're on.\r\n   * 0 = default button looks\r\n   * Otherwise, it indexes altButtons offset by 1, so buttonIndex 1 is altButtons[0]\r\n   */\r\n  const [buttonIndex, setButtonIndex] = useState(0);\r\n\r\n  /** Cycle the button looks state */\r\n  const onPress = () => {\r\n    setButtonIndex(currentButtonIndex => {\r\n      if (currentButtonIndex < 0) return 0;\r\n\r\n      return loop\r\n        ? (currentButtonIndex + 1) % (altButtons.length + 1)\r\n        : Math.min(currentButtonIndex + 1, altButtons.length);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <BasicButton\r\n      {...(buttonIndex === 0 ? buttonDataProps : altButtons[buttonIndex - 1])}\r\n      onPress={onPress}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { StyleProp, ViewStyle } from 'react-native';\r\nimport { PropsWithNavigation } from '../../../util/ActionFactory';\r\nimport { TextData } from '../Text';\r\nimport { ActionButton, ActionButtonData } from './ActionButton';\r\nimport { BasicButton, BasicButtonData } from './BasicButton';\r\nimport { ToggleButton, ToggleButtonData } from './ToggleButton';\r\n\r\n//----- BUTTON TYPES -----//\r\n\r\nexport const Buttons: {\r\n  [contentType: string]: (props: PropsWithNavigation<any>) => JSX.Element;\r\n} = {\r\n  ActionButton,\r\n  BasicButton,\r\n  ToggleButton,\r\n};\r\n\r\n/** Defining data for every button type. All button types should extend ButtonDataBase */\r\nexport type ButtonData = ActionButtonData | BasicButtonData | ToggleButtonData;\r\n\r\n/** All button types available */\r\nexport type ButtonType = keyof typeof Buttons;\r\n\r\n/** The base data that every button must have. All button data types should extend ButtonDataBase */\r\nexport type ButtonDataBase = {\r\n  type: ButtonType;\r\n  design?: ButtonDesign;\r\n  style?: StyleProp<ViewStyle>;\r\n  text?: TextData;\r\n};\r\n\r\ntype ButtonDesign = 'normal' | 'answer';\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  View,\r\n  ViewStyle,\r\n  StyleProp,\r\n  TouchableWithoutFeedback,\r\n  Platform,\r\n} from 'react-native';\r\nimport theme from '../../Theme';\r\nimport { createDesignStyleSheets } from '../../util/DesignStyleSheets';\r\nimport { ContentList, ContentListData, ContentListDesign } from './ContentList';\r\nimport { ContentDataBase } from './Contents';\r\nimport { HeaderText, HeaderTextData } from './HeaderText';\r\nimport { Text, getTextDataObject } from './Text';\r\n\r\nexport type SlideContentData = ContentDataBase & {\r\n  type: 'Slide';\r\n  headerText?: HeaderTextData;\r\n  /** Whether or not you can press the header to open and close the slide. Defaults to true */\r\n  canClose?: boolean;\r\n  /** Whether the slide is open by default. Only applicable if `canClose` is true */\r\n  isOpenDefault?: boolean;\r\n  /** The design for the slide overall */\r\n  design?: SlideDesign;\r\n  /** The design for the content list in the slide */\r\n  contentDesign?: ContentListDesign;\r\n  style?: StyleProp<ViewStyle>;\r\n} & Omit<ContentListData, 'design'>;\r\n\r\ntype SlideDesign = 'normal' | 'primary';\r\n\r\n/**\r\n * Data that defines Slide but without the type\r\n * (useful when you want to use Slide in another component)\r\n */\r\nexport type SlideData = Omit<SlideContentData, 'type'>;\r\n\r\n/** Props the Slide needs to function */\r\nexport interface SlideProps extends SlideData {\r\n  isOpen?: boolean;\r\n  onChange?: (isOpening: boolean) => void;\r\n}\r\n\r\nexport const Slide = (slideProps: SlideProps) => {\r\n  const {\r\n    headerText,\r\n    canClose = true,\r\n    isOpenDefault = false,\r\n    isOpen: isOpenProp,\r\n    onChange,\r\n    design = 'normal',\r\n    style,\r\n    ...contentListProps\r\n  } = slideProps;\r\n  const headerTextObject = headerText\r\n    ? getTextDataObject(headerText)\r\n    : undefined;\r\n\r\n  const [isOpen, setIsOpen] = useState(\r\n    canClose ? isOpenProp ?? isOpenDefault : true,\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (canClose && isOpenProp !== undefined) setIsOpen(isOpenProp);\r\n  }, [canClose, isOpenProp]);\r\n\r\n  // Just use the one design style available\r\n  const designStyle = designStyles[design];\r\n  return (\r\n    <View\r\n      style={[\r\n        designStyle.slideView,\r\n        isOpen ? designStyle.slideViewOpen : undefined,\r\n        style,\r\n      ]}>\r\n      <TouchableWithoutFeedback\r\n        onPress={() => {\r\n          if (canClose) {\r\n            if (isOpenProp !== undefined) {\r\n              if (onChange) onChange(!isOpen);\r\n            } else setIsOpen(!isOpen);\r\n          }\r\n        }}>\r\n        <View\r\n          style={[\r\n            designStyle.headerView,\r\n            isOpen ? undefined : designStyle.headerViewClosed,\r\n            designStyle.contentView,\r\n            canClose ? designStyle.pressableHeaderView : undefined,\r\n          ]}>\r\n          {headerTextObject && (\r\n            <HeaderText\r\n              {...headerTextObject}\r\n              style={[designStyle.headerText, headerTextObject.style]}\r\n            />\r\n          )}\r\n          {canClose && (\r\n            <Text\r\n              design=\"small\"\r\n              style={[\r\n                designStyle.chevron,\r\n                isOpen ? undefined : designStyle.chevronClosed,\r\n              ]}\r\n              text={isOpen ? '^' : 'v'}\r\n            />\r\n          )}\r\n        </View>\r\n      </TouchableWithoutFeedback>\r\n      <ContentList\r\n        style={[\r\n          designStyle.contentView,\r\n          isOpen ? undefined : designStyle.closedContent,\r\n        ]}\r\n        {...contentListProps}\r\n        design={contentListProps.contentDesign}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst designStyles = createDesignStyleSheets(\r\n  {\r\n    slideView: {\r\n      backgroundColor: theme.slide.background,\r\n      width: '90%',\r\n      borderBottomWidth: 10,\r\n      borderBottomColor: theme.slide.bottom,\r\n    },\r\n    slideViewOpen: {\r\n      paddingBottom: 10,\r\n    },\r\n    headerView: {\r\n      paddingTop: 10,\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'center',\r\n    },\r\n    headerViewClosed: {\r\n      paddingBottom: 10,\r\n    },\r\n    contentView: {\r\n      paddingHorizontal: 15,\r\n    },\r\n    pressableHeaderView: {\r\n      // Display cursor on web https://github.com/necolas/react-native-web/issues/506#issuecomment-1412166955\r\n      // This is here to avoid errors with the next line. This is just confirming the default display\r\n      display: 'flex',\r\n      ...Platform.select({ web: { cursor: 'pointer' } }),\r\n    },\r\n    headerText: {\r\n      fontSize: 23,\r\n      fontWeight: '700',\r\n      color: theme.slide.headerText,\r\n    },\r\n    chevron: {\r\n      fontWeight: '700',\r\n    },\r\n    chevronClosed: {\r\n      fontWeight: '500',\r\n    },\r\n    closedContent: {\r\n      // Just hide the contents if the slide is closed so it can load while hidden\r\n      display: 'none',\r\n    },\r\n  },\r\n  {\r\n    primary: {\r\n      headerText: {\r\n        color: theme.slide.headerTextPrimary,\r\n      },\r\n    },\r\n  },\r\n);\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React from 'react';\r\nimport { createDesignStyleSheets } from '../../util/DesignStyleSheets';\r\nimport { ButtonDataBase } from './buttons/Buttons';\r\nimport { ContentData, ContentDataBase } from './Contents';\r\nimport { ScrRangeDisplayContentData } from './ScrRangeDisplay';\r\nimport { Slide, SlideData } from './Slide';\r\nimport { getTextDataObject } from './Text';\r\n\r\ntype SlideScripture = {\r\n  reference: string;\r\n  hiddenButton?: Omit<ButtonDataBase, 'type'>;\r\n  revealedButton?: Omit<ButtonDataBase, 'type'>;\r\n};\r\n\r\nexport type ScriptureSlideContentData = ContentDataBase & {\r\n  type: 'ScriptureSlide';\r\n  scripture: SlideScripture | [SlideScripture, ...SlideScripture[]];\r\n} & Omit<SlideData, 'contents'>;\r\n\r\nconst defaultHiddenButton: Omit<ButtonDataBase, 'type'> = {\r\n  text: { text: 'Tap to reveal answer' },\r\n  design: 'answer',\r\n};\r\n\r\nconst defaultRevealedButton: Omit<ButtonDataBase, 'type'> = {\r\n  design: 'answer',\r\n};\r\n\r\n/**\r\n * Data that defines ScriptureSlide but without the type\r\n * (useful when you want to use ScriptureSlide in another component)\r\n */\r\nexport type ScriptureSlideData = Omit<ScriptureSlideContentData, 'type'>;\r\n\r\n/** Props the ScriptureSlide needs to function */\r\nexport interface ScriptureSlideProps extends ScriptureSlideData {}\r\n\r\nexport const ScriptureSlide = ({\r\n  headerText,\r\n  scripture,\r\n  // Overwrite default padding from ContentList with 3\r\n  padding = 3,\r\n  ...slideProps\r\n}: ScriptureSlideProps) => {\r\n  const designStyle = designStyles[''];\r\n\r\n  const contents: ContentData[] = [];\r\n\r\n  const scriptures = Array.isArray(scripture) ? scripture : [scripture];\r\n\r\n  scriptures.forEach((scr, i) => {\r\n    // We will show the first reference as header if there isn't a header, so only make this subheader if there is header text\r\n    if (i !== 0 || headerText)\r\n      contents.push({\r\n        type: 'Text',\r\n        design: 'subheader',\r\n        style: [designStyle.subheader, designStyle.contents],\r\n        text: scr.reference,\r\n      });\r\n\r\n    // Only show a button if a button was provided to be shown\r\n    const showButton = scr.hiddenButton || scr.revealedButton;\r\n    // Ensure the buttonStates have enough information in them\r\n    // TODO: Make a good merge function and merge these better so you can style the default text without losing the default text\r\n    const hiddenButtonMerged = {\r\n      ...defaultHiddenButton,\r\n      ...scr.hiddenButton,\r\n    };\r\n    const revealedButtonMerged = {\r\n      ...defaultRevealedButton,\r\n      ...scr.revealedButton,\r\n    };\r\n\r\n    contents.push({\r\n      type: 'ScrRangeDisplay',\r\n      reference: scr.reference,\r\n      style: designStyle.contents,\r\n    } as ScrRangeDisplayContentData);\r\n\r\n    if (showButton)\r\n      contents.push({\r\n        type: 'ToggleButton',\r\n        design: 'answer',\r\n        // Default button is hidden button\r\n        ...hiddenButtonMerged,\r\n        // Can toggle to revealed button\r\n        altButtons: [revealedButtonMerged],\r\n      });\r\n  });\r\n\r\n  return (\r\n    <Slide\r\n      headerText={\r\n        headerText\r\n          ? { style: {}, ...getTextDataObject(headerText) }\r\n          : { text: scriptures[0].reference }\r\n      }\r\n      contents={contents}\r\n      padding={padding}\r\n      {...slideProps}\r\n    />\r\n  );\r\n};\r\n\r\nconst designStyles = createDesignStyleSheets(\r\n  {\r\n    subheader: {\r\n      fontSize: 18,\r\n      fontWeight: '700',\r\n    },\r\n    contents: {\r\n      textAlign: 'left',\r\n      alignSelf: 'flex-start',\r\n    },\r\n  },\r\n  {},\r\n);\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * ScriptureService.ts - Handles getting Scripture text\r\n */\r\n\r\nimport { ScrRangeDisplayContentData } from '../components/contents/ScrRangeDisplay';\r\nimport { ScriptureSlideContentData } from '../components/contents/ScriptureSlide';\r\nimport { isDev, isString, isWeb } from '../util/Util';\r\nimport { forEachContent } from './ScreenService';\r\n\r\nconst defaultShortName = 'WEB';\r\n\r\n/** Example query from https://bible-api.com/romans+12:1-2 */\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n/* const bibleApiScriptureContentExample: ApiScriptureContent = {\r\n  reference: 'Romans 12:1-2',\r\n  verses: [\r\n    {\r\n      book_id: 'ROM',\r\n      book_name: 'Romans',\r\n      chapter: 12,\r\n      verse: 1,\r\n      text: 'Therefore I urge you, brothers, by the mercies of God, to present your bodies a living sacrifice, holy, acceptable to God, which is your spiritual service.\\n',\r\n    },\r\n    {\r\n      book_id: 'ROM',\r\n      book_name: 'Romans',\r\n      chapter: 12,\r\n      verse: 2,\r\n      text: 'Don’t be conformed to this world, but be transformed by the renewing of your mind, so that you may prove what is the good, well-pleasing, and perfect will of God.\\n',\r\n    },\r\n  ],\r\n  text: 'Therefore I urge you, brothers, by the mercies of God, to present your bodies a living sacrifice, holy, acceptable to God, which is your spiritual service.\\nDon’t be conformed to this world, but be transformed by the renewing of your mind, so that you may prove what is the good, well-pleasing, and perfect will of God.\\n',\r\n  translation_id: 'web',\r\n  translation_name: 'World English Bible',\r\n  translation_note: 'Public Domain',\r\n}; */\r\n\r\n// listed at https://bible-api.com/. Did not finish\r\nconst bibleApiAvailableTranslations: ScriptureResourceInfo[] = require('../../assets/data/bible-api.com/translations.json');\r\n\r\n/** Information about the Scripture Resource */\r\nexport type ScriptureResourceInfo = {\r\n  /** Translation shortName */\r\n  shortName: string;\r\n  /** Translation long name */\r\n  name: string;\r\n  /** Translation id that is used to look up references */\r\n  id: string;\r\n  /** Translation language */\r\n  language: string;\r\n  /** Translation license */\r\n  license: string;\r\n};\r\n\r\n/** Verse contents and metadata from bible-api.com */\r\ntype ApiVerseContent = {\r\n  /** book short name index */\r\n  book_id: string;\r\n  /** book long name */\r\n  book_name: string;\r\n  /** chapter number */\r\n  chapter: number;\r\n  /** verse number */\r\n  verse: number;\r\n  /** Scripture text at this verse */\r\n  text: string;\r\n};\r\n\r\n/** Scripture contents and metadata from bible-api.com */\r\ntype ApiScriptureContent = {\r\n  /** Scripture reference as a string */\r\n  reference: string;\r\n  /** verse contents */\r\n  verses: ApiVerseContent[];\r\n  /** Concatenated Scripture text at each verse in the range */\r\n  text: string;\r\n  /** Translation shortName */\r\n  translation_id: string;\r\n  /** Translation long name */\r\n  translation_name: string;\r\n  /** Translation license */\r\n  translation_note: string;\r\n};\r\n\r\n/** Contents of the verse */\r\nexport type ScriptureVerseContent = {\r\n  /** verse number */\r\n  verse: number;\r\n  /** Scripture text at this verse */\r\n  text: string;\r\n};\r\n\r\n/** Range of Scripture verses */\r\nexport type ScriptureVerseRangeContent = {\r\n  /** Information about the Scripture resource with this verse range */\r\n  resourceInfo: ScriptureResourceInfo;\r\n  /** Scripture reference as a string */\r\n  reference: string;\r\n  /** verse contents */\r\n  verses: ScriptureVerseContent[];\r\n  /** URL from which we fetched these verses */\r\n  sourceUrl: string;\r\n};\r\n\r\ntype ScriptureCache = ScriptureResourceInfo & {\r\n  /** Base url from which we fetched these verses */\r\n  sourceUrl: string;\r\n  verses: {\r\n    [reference: string]:\r\n      | ScriptureVerseRangeContent\r\n      | Promise<ScriptureVerseRangeContent>;\r\n  };\r\n};\r\n\r\ntype MultiScriptureCache = {\r\n  [id: string]: ScriptureCache;\r\n};\r\n\r\n/**\r\n * Get a list of information about available translations\r\n * TODO: make some kind of initialize function that grabs these from server. Or just make all this lazy-load async, which is probably better\r\n */\r\nexport const getTranslations = (): ScriptureResourceInfo[] =>\r\n  bibleApiAvailableTranslations;\r\n\r\n/**\r\n * Get information about a translation by short name\r\n * @param shortName which translation to get information about\r\n * @returns information about the translation requested\r\n */\r\nexport const getTranslation = (shortName: string): ScriptureResourceInfo => {\r\n  const resourceInfo = bibleApiAvailableTranslations.find(\r\n    resInfo => resInfo.shortName === shortName,\r\n  );\r\n  if (!resourceInfo)\r\n    throw new Error(`Translation shortName ${shortName} not found`);\r\n  return resourceInfo;\r\n};\r\n\r\n/**\r\n * Get information about a translation by id\r\n * @param id which translation to get information about by api translation id\r\n * @returns information about the translation requested\r\n */\r\nexport const getTranslationById = (id: string): ScriptureResourceInfo => {\r\n  const resourceInfo = bibleApiAvailableTranslations.find(\r\n    resInfo => resInfo.id === id,\r\n  );\r\n  if (!resourceInfo) throw new Error(`Translation id ${id} not found`);\r\n  return resourceInfo;\r\n};\r\n\r\nconst mapApiVerseToContent = (\r\n  apiVerse: ApiVerseContent,\r\n): ScriptureVerseContent => ({ verse: apiVerse.verse, text: apiVerse.text });\r\n\r\nconst mapApiVerseRangeToContent = (\r\n  apiVerseRange: ApiScriptureContent,\r\n  sourceUrl: string,\r\n): ScriptureVerseRangeContent => ({\r\n  resourceInfo: getTranslationById(apiVerseRange.translation_id),\r\n  reference: apiVerseRange.reference,\r\n  verses: apiVerseRange.verses.map(apiVerse => mapApiVerseToContent(apiVerse)),\r\n  sourceUrl,\r\n});\r\n\r\n// #region retrieving and caching Scripture\r\n\r\n/** Scripture cache containing verses in our desired format and info about where we got them */\r\nconst scriptureCache: MultiScriptureCache = require('../../assets/data/scripture.json');\r\n\r\nconst scriptureUrl = 'https://bible-api.com/';\r\n\r\n/**\r\n * Get Scripture verses from a string reference\r\n * @param reference reference to get verses from like 'Romans 12:1-2', 'Romans 3:5', 'Mark 3:5,6,7-12'\r\n * @param shortName which translation to get verses from\r\n */\r\nexport const getScripture = (\r\n  reference: string,\r\n  shortName = defaultShortName,\r\n): Promise<ScriptureVerseRangeContent> => {\r\n  // Try to get from cache\r\n  const translationInfo = getTranslation(shortName);\r\n  const translationId = translationInfo.id;\r\n  if (scriptureCache[translationId]) {\r\n    const cachedVerses = scriptureCache[translationId].verses[reference];\r\n    if (cachedVerses) return Promise.resolve(cachedVerses);\r\n  }\r\n\r\n  // Get verses from server\r\n  if (isDev()) console.warn(`Did not find ${reference} in cache. Caching`);\r\n  const versesUrl = `${scriptureUrl}${reference}?translation=${translationId}`;\r\n  if (!scriptureCache[translationId])\r\n    scriptureCache[translationId] = {\r\n      ...translationInfo,\r\n      sourceUrl: scriptureUrl,\r\n      verses: {},\r\n    };\r\n  const versesPromise = (async () => {\r\n    let responseContents: any;\r\n    let error: any | undefined;\r\n    if (isDev()) {\r\n      try {\r\n        const response = await fetch(versesUrl);\r\n        responseContents = await response.json();\r\n\r\n        if (!response.ok) error = responseContents;\r\n      } catch (e) {\r\n        error = e;\r\n      }\r\n    } else error = `Not in dev mode. Not fetching.`;\r\n    if (error)\r\n      throw new Error(\r\n        `Failed to get Scripture for ${reference} ${shortName}. Error: ${error}`,\r\n      );\r\n\r\n    const apiVerses: ApiScriptureContent = responseContents;\r\n    const verses = mapApiVerseRangeToContent(apiVerses, versesUrl);\r\n\r\n    // Save verses to cache\r\n    scriptureCache[translationId].verses[reference] = verses;\r\n    // console.log(`${reference} cached`);\r\n\r\n    return verses;\r\n  })();\r\n\r\n  // Save verses promise to cache\r\n  scriptureCache[translationId].verses[reference] = versesPromise;\r\n\r\n  return versesPromise;\r\n};\r\n\r\n/* Get all Scripture References from the screens and cache the verses */\r\nasync function cacheAllScripture() {\r\n  const getScripturePromises: Set<ReturnType<typeof getScripture>> = new Set();\r\n  forEachContent(content => {\r\n    if (!isString(content)) {\r\n      if ('scripture' in content) {\r\n        const scriptureSlide = content as ScriptureSlideContentData;\r\n        if (scriptureSlide.scripture) {\r\n          const scriptures = Array.isArray(scriptureSlide.scripture)\r\n            ? scriptureSlide.scripture\r\n            : [scriptureSlide.scripture];\r\n          scriptures.forEach(scripture =>\r\n            getScripturePromises.add(getScripture(scripture.reference)),\r\n          );\r\n        }\r\n      } else if ('reference' in content) {\r\n        const scrRangeDisplay = content as ScrRangeDisplayContentData;\r\n        if (scrRangeDisplay.reference) {\r\n          getScripturePromises.add(getScripture(scrRangeDisplay.reference));\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  await Promise.allSettled([...getScripturePromises.values()]);\r\n\r\n  if (isWeb())\r\n    localStorage.setItem('scriptureCache', JSON.stringify(scriptureCache));\r\n}\r\n\r\n// Cache all Scripture at startup\r\ncacheAllScripture();\r\n\r\n// #endregion\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { ScriptureVerseRangeContent } from '../services/ScriptureService';\r\nimport { sup } from '../util/Util';\r\nimport { Text, TextDataObject } from './contents/Text';\r\n\r\nexport type ScriptureTextProps = {\r\n  scriptureText: ScriptureVerseRangeContent;\r\n} & Omit<TextDataObject, 'text'>;\r\n\r\nexport const ScriptureText = ({\r\n  scriptureText,\r\n  // Default design to small to overwrite default in Text\r\n  design = 'small',\r\n  ...textProps\r\n}: ScriptureTextProps) => {\r\n  // Put superscripted verse numbers and a non-breaking space before the verse\r\n  // Trim the verse to remove extraneous new lines\r\n  const text = scriptureText.verses\r\n    .map(v => `${sup(v.verse.toString())}\\xa0${v.text.trim()}`)\r\n    .join(' ');\r\n\r\n  return <Text {...textProps} text={text} design={design} />;\r\n};\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { useCallback } from 'react';\r\nimport usePromise from '../../hooks/usePromise';\r\nimport { getScripture } from '../../services/ScriptureService';\r\nimport { ScriptureText } from '../ScriptureText';\r\nimport { ContentDataBase } from './Contents';\r\nimport { Text, TextDataObject } from './Text';\r\n\r\nexport type ScrRangeDisplayContentData = ContentDataBase & {\r\n  type: 'ScrRangeDisplay';\r\n  reference: string;\r\n} & Omit<TextDataObject, 'text'>;\r\n\r\n/**\r\n * Data that defines ScrRangeDisplay but without the type\r\n * (useful when you want to use ScrRangeDisplay in another component)\r\n */\r\nexport type ScrRangeDisplayData = Omit<ScrRangeDisplayContentData, 'type'>;\r\n\r\n/** Props the ScrRangeDisplay needs to function */\r\nexport interface ScrRangeDisplayProps extends ScrRangeDisplayData {}\r\n\r\nexport const ScrRangeDisplay = ({\r\n  reference,\r\n  ...textProps\r\n}: ScrRangeDisplayProps) => {\r\n  const [scriptureText] = usePromise(\r\n    useCallback(() => getScripture(reference), []),\r\n    undefined,\r\n  );\r\n\r\n  return scriptureText ? (\r\n    <ScriptureText scriptureText={scriptureText} {...textProps} />\r\n  ) : (\r\n    <Text text={'loading'} {...textProps} />\r\n  );\r\n};\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { ImageRequireSource, ImageURISource } from 'react-native';\r\n\r\nconst images = {\r\n  icon: require('../../assets/favicon.png'),\r\n  'cycles-of-involvement': require('../../assets/images/cycles-of-involvement.png'),\r\n  'invite': require('../../assets/images/invite.png'),\r\n  'nations': require('../../assets/images/nations.png'),\r\n  'spiritual-multiplication': require('../../assets/images/spiritual-multiplication.png'),\r\n};\r\n\r\ntype ImageKey = keyof typeof images;\r\n\r\ntype ImageRemoteUrl = `https://${string}` | `data:${string}`;\r\n\r\nexport type ImageUrl = ImageKey | ImageRemoteUrl;\r\n\r\nexport function isRemote(imageUrl: ImageUrl): imageUrl is ImageRemoteUrl {\r\n  return imageUrl.startsWith('https://') || imageUrl.startsWith('data:');\r\n}\r\n\r\n/** Gets the url for an image. Use as `source` prop in `<Image/>` component */\r\nexport function getImageSource(\r\n  imageUrl: ImageUrl,\r\n): ImageURISource | ImageRequireSource {\r\n  if (isRemote(imageUrl)) return { uri: imageUrl };\r\n  return images[imageUrl];\r\n}\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { PropsWithNavigation } from '../../util/ActionFactory';\r\nimport { isString } from '../../util/Util';\r\nimport { ButtonList, ButtonListContentData } from './ButtonList';\r\nimport { ButtonData, Buttons } from './buttons/Buttons';\r\nimport { ContentList, ContentListContentData } from './ContentList';\r\nimport { Header, HeaderContentData } from './Header';\r\nimport { HeaderText, HeaderTextContentData } from './HeaderText';\r\nimport { ScriptureSlide, ScriptureSlideContentData } from './ScriptureSlide';\r\nimport { ScrRangeDisplay, ScrRangeDisplayContentData } from './ScrRangeDisplay';\r\nimport { Slide, SlideContentData } from './Slide';\r\nimport { SubheaderText, SubheaderTextContentData } from './SubheaderText';\r\nimport { Text, TextContentData } from './Text';\r\nimport { Image, ImageContentData } from './Image';\r\n\r\n//----- CONTENT TYPES -----//\r\n\r\n/** Defining data for every content type. All content types should extend ContentDataBase */\r\nexport type ContentData =\r\n  | ButtonData\r\n  | TextContentData\r\n  | HeaderTextContentData\r\n  | SubheaderTextContentData\r\n  | ButtonListContentData\r\n  | HeaderContentData\r\n  | SlideContentData\r\n  | ContentListContentData\r\n  | ScriptureSlideContentData\r\n  | ScrRangeDisplayContentData\r\n  | ImageContentData;\r\n\r\n/** All content types available. Content is a component that does various things */\r\nexport type ContentType = keyof typeof Contents;\r\n\r\n/** The base data that every button must have. All content types should extend ContentDataBase */\r\nexport type ContentDataBase = {\r\n  type: ContentType;\r\n};\r\n\r\n//----- CONTENTS AND OTHER FUNCTIONS -----//\r\n\r\nexport const Contents: {\r\n  [contentType: string]: (props: PropsWithNavigation<any>) => JSX.Element;\r\n} = {\r\n  ...Buttons,\r\n  Text,\r\n  HeaderText,\r\n  SubheaderText,\r\n  ButtonList,\r\n  Header,\r\n  Slide,\r\n  ContentList,\r\n  ScriptureSlide,\r\n  ScrRangeDisplay,\r\n  Image,\r\n};\r\n\r\n/** Determines whether the content is openable and should be considered for managing its isOpen prop */\r\nexport function isOpenable(content: ContentData) {\r\n  return (\r\n    !isString(content) &&\r\n    (content.type === 'Slide' || content.type === 'ScriptureSlide') &&\r\n    // Default is undefined, which is true meaning it can close\r\n    (content.canClose || content.canClose === undefined)\r\n  );\r\n}\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { useEffect, useState } from 'react';\r\n\r\n// From https://github.com/tjcouch-sil/paranext-poc/blob/main/react-electron-poc/src/renderer/hooks/usePromise.ts\r\n\r\n/** Awaits a promise and returns a loading value while the promise is unresolved\r\n * @param promiseFactoryCallback a function that returns the promise to await. If the promise resolves to null, the value will not change.\r\n *      WARNING: MUST BE WRAPPED IN A useCallback. The reference must not be updated every render\r\n * @param defaultValue the initial value to return while first awaiting the promise. If preserveValue is false, this value is also shown while awaiting the promise on subsequent calls.\r\n *      WARNING: MUST BE WRAPPED IN A useState, useMemo, etc. The reference must not be updated every render\r\n * @param preserveValue whether to leave the value as the most recent resolved promise value or set it back to defaultValue while running the promise again. Default to true\r\n * @returns [value, isLoading] the current value for the promise, either the defaultValue or the resolved promise value; whether the promise is waiting to be resolved\r\n */\r\nexport default <T>(\r\n  promiseFactoryCallback: () => Promise<T | null>,\r\n  defaultValue: T,\r\n  preserveValue = true,\r\n): [value: T, isLoading: boolean] => {\r\n  const [value, setValue] = useState<T>(defaultValue);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  useEffect(() => {\r\n    let promiseIsCurrent = true;\r\n    setLoading(true);\r\n    (async () => {\r\n      const result = await promiseFactoryCallback();\r\n      if (promiseIsCurrent) {\r\n        // If the promise returned null, it purposely did this to do nothing. Maybe its dependencies are not set up\r\n        if (result != null) setValue(result);\r\n        setLoading(false);\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      // Mark this promise as old and not to be used\r\n      promiseIsCurrent = false;\r\n      if (!preserveValue) setValue(defaultValue);\r\n    };\r\n  }, [promiseFactoryCallback, defaultValue, preserveValue]);\r\n\r\n  return [value, loading];\r\n};\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { ImageStyle, StyleProp, TouchableWithoutFeedback } from 'react-native';\r\nimport { ContentDataBase } from './Contents';\r\nimport { Image as ReactImage } from 'react-native';\r\nimport {\r\n  ImageUrl,\r\n  getImageSource,\r\n  isRemote,\r\n} from '../../services/ImageService';\r\nimport { isWeb } from '../../util/Util';\r\nimport { useState } from 'react';\r\n// Thanks to Yahia Naguib at https://stackoverflow.com/a/61130824 for sharing how to get babel to include this package\r\nimport ImageView from 'better-react-native-image-viewing';\r\nimport { openURL } from 'expo-linking';\r\n\r\n/** Simple defining data for displaying images */\r\nexport interface ImageContentData extends ContentDataBase {\r\n  type: 'Image';\r\n  image: ImageUrl;\r\n  attribution?: string;\r\n  style?: StyleProp<ImageStyle>;\r\n}\r\n\r\n/**\r\n * Data that defines Image but without the type\r\n * (useful for when you want to use Image in another component)\r\n */\r\nexport type ImageData = Omit<ImageContentData, 'type'>;\r\n\r\n/** Props the Image needs to function */\r\nexport interface ImageProps extends ImageData {}\r\n\r\nexport function Image({ image: source, style }: ImageProps) {\r\n  const [isModal, setIsModal] = useState(false);\r\n\r\n  const defaultSize = 75 * (isWeb() && isModal ? 3 : 1);\r\n\r\n  return (\r\n    <>\r\n      <TouchableWithoutFeedback\r\n        onPress={() =>\r\n          isWeb()\r\n            ? window.open(getImageSource(source).toString(), '_blank')\r\n            : setIsModal(!isModal)\r\n        }>\r\n        <ReactImage\r\n          source={getImageSource(source)}\r\n          aria-label={source}\r\n          style={[\r\n            isWeb() || isRemote(source)\r\n              ? { width: defaultSize, height: defaultSize }\r\n              : {},\r\n            style,\r\n          ]}\r\n        />\r\n      </TouchableWithoutFeedback>\r\n      {!isWeb() && isModal && (\r\n        <ImageView\r\n          images={[getImageSource(source)]}\r\n          imageIndex={0}\r\n          visible={isModal}\r\n          onRequestClose={() => setIsModal(false)}\r\n          animationType=\"slide\"\r\n          swipeToCloseEnabled\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","/**\r\n * Copyright (C) 2023 TJ Couch\r\n * This file is part of discipleship‑app‑template.\r\n *\r\n * discipleship‑app‑template is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * discipleship‑app‑template is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with discipleship‑app‑template. If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n  SafeAreaView,\r\n  StatusBar,\r\n  StyleSheet,\r\n  useColorScheme,\r\n} from 'react-native';\r\nimport { NavigationContainer, Route } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { getAppScreens } from './src/services/ScreenService';\r\nimport { Screens } from './src/components/screens/Screens';\r\nimport WebWrapper from './src/components/WebWrapper';\r\nimport ContentsModuleContext from './src/components/contents/ContentsContext';\r\nimport * as ContentsModule from './src/components/contents/Contents';\r\nimport theme from './src/Theme';\r\nimport { isWeb } from './src/util/Util';\r\nimport { preventAutoHideAsync, hideAsync } from 'expo-splash-screen';\r\nimport { useFonts } from 'expo-font';\r\n\r\n/** Web only: sessionStorage key used to save and to restore the route stack on refresh */\r\nconst ROUTE_STACK_KEY = 'route-stack';\r\n\r\npreventAutoHideAsync();\r\n\r\nexport default function App() {\r\n  const isDarkMode = useColorScheme() === 'dark';\r\n\r\n  const backgroundStyle = {\r\n    backgroundColor: isDarkMode ? 'black' : 'white',\r\n  };\r\n\r\n  const Stack = useMemo(() => createNativeStackNavigator(), []);\r\n\r\n  const appScreens = useMemo(() => getAppScreens(), []);\r\n  // Get an array of the screens in the app\r\n  const screens = useMemo(() => [...appScreens.screens.values()], [appScreens]);\r\n\r\n  // Web only: Restore the route stack on refresh if in same session\r\n  const restoredRoutes = useMemo<Route<string>[] | undefined>(() => {\r\n    if (!isWeb()) return undefined;\r\n\r\n    const routeStackJson = sessionStorage.getItem(ROUTE_STACK_KEY);\r\n    if (!routeStackJson) return undefined;\r\n\r\n    return JSON.parse(routeStackJson).map((route: string) => ({ name: route }));\r\n  }, []);\r\n\r\n  // WARNING: Because iOS does not support fonts well, we are using special naming conventions\r\n  // here to add bold and italic. If you want a font family to support bold and italic on iOS,\r\n  // you must add `<font_family>_bold`, `<font_family>_italic`, and `<font_family>_bold_italic`\r\n  // Read more at https://github.com/expo/expo/issues/9149\r\n  const [fontsLoaded, fontError] = useFonts({\r\n    LibreFranklin: require('./assets/fonts/LibreFranklin-VariableFont_wght.ttf'),\r\n    LibreFranklin_bold: require('./assets/fonts/LibreFranklin-Bold.ttf'),\r\n    LibreFranklin_italic: require('./assets/fonts/LibreFranklin-Italic.ttf'),\r\n    LibreFranklin_bold_italic: require('./assets/fonts/LibreFranklin-BoldItalic.ttf'),\r\n    OpenSauceOne: require('./assets/fonts/OpenSauceOne-Regular.ttf'),\r\n    OpenSauceOne_bold: require('./assets/fonts/OpenSauceOne-Bold.ttf'),\r\n    OpenSauceOne_italic: require('./assets/fonts/OpenSauceOne-Italic.ttf'),\r\n    OpenSauceOne_bold_italic: require('./assets/fonts/OpenSauceOne-BoldItalic.ttf'),\r\n  });\r\n\r\n  // Wait a few seconds to see if the fonts will load before just showing the app\r\n  // Unfortunately, it seems `useFonts` doesn't throw an error if the fonts don't\r\n  // come through over websocket from webpack (for example, if you're running the\r\n  // app over the network, and you didn't port forward the webpack port). So let's\r\n  // just set a timeout fail-safe.\r\n  const [isWaitingForFontLoading, setIsWaitingForFontLoading] = useState(true);\r\n  // Only run the timer once\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setIsWaitingForFontLoading(false);\r\n    }, 5000);\r\n  }, []);\r\n\r\n  const onLayoutRootView = useCallback(async () => {\r\n    // When the timer runs out, if the fonts haven't responded, throw an error and let the app load\r\n    if (!isWaitingForFontLoading && !fontsLoaded && !fontError)\r\n      console.error('Timed out waiting for fonts to load!');\r\n    // If the timer runs out or the fonts respond, show the app\r\n    if (!isWaitingForFontLoading || fontsLoaded || fontError) {\r\n      if (fontError) console.error(fontError);\r\n      await hideAsync();\r\n    }\r\n  }, [fontsLoaded, fontError, isWaitingForFontLoading]);\r\n\r\n  if (isWaitingForFontLoading && !fontsLoaded && !fontError) return;\r\n\r\n  return (\r\n    <SafeAreaView\r\n      style={[backgroundStyle, styles.safeAreaView]}\r\n      onLayout={onLayoutRootView}>\r\n      <ContentsModuleContext.Provider value={ContentsModule}>\r\n        <WebWrapper>\r\n          <NavigationContainer\r\n            initialState={\r\n              restoredRoutes\r\n                ? {\r\n                    routes: restoredRoutes,\r\n                  }\r\n                : undefined\r\n            }>\r\n            <StatusBar\r\n              barStyle={isDarkMode ? 'light-content' : 'dark-content'}\r\n              backgroundColor={backgroundStyle.backgroundColor}\r\n            />\r\n            <Stack.Navigator\r\n              initialRouteName={appScreens.initialScreen}\r\n              screenListeners={\r\n                // Web only: Persist the route stack on changes so we can restore it later\r\n                isWeb()\r\n                  ? {\r\n                      // Looks like the types for this event are wrong :( so just use any\r\n                      state: (e: any) => {\r\n                        const routeStack = e?.data?.state?.routes?.map(\r\n                          (route: Route<string>) => route.name,\r\n                        );\r\n                        sessionStorage.setItem(\r\n                          ROUTE_STACK_KEY,\r\n                          JSON.stringify(\r\n                            !routeStack || routeStack.length === 0\r\n                              ? null\r\n                              : routeStack,\r\n                          ),\r\n                        );\r\n                      },\r\n                    }\r\n                  : undefined\r\n              }>\r\n              {screens.map(screen => (\r\n                <Stack.Screen\r\n                  name={screen.id}\r\n                  key={screen.id}\r\n                  component={Screens[screen.type]}\r\n                  options={{\r\n                    title: screen.title || screen.id,\r\n                    // Header background\r\n                    headerStyle: {\r\n                      backgroundColor: theme.navigation.background,\r\n                    },\r\n                    // Remove the white line at the bottom of the header\r\n                    headerShadowVisible: !isWeb(),\r\n                    // Back button and header text color\r\n                    headerTintColor: theme.navigation.text,\r\n                    // App background\r\n                    contentStyle: {\r\n                      backgroundColor: theme.app.background,\r\n                      borderTopWidth: isWeb() ? 1 : 0,\r\n                      borderTopColor: theme.navigation.bottom,\r\n                    },\r\n                    headerShown: screen.showNavigationBar ?? true,\r\n                  }}\r\n                />\r\n              ))}\r\n            </Stack.Navigator>\r\n          </NavigationContainer>\r\n        </WebWrapper>\r\n      </ContentsModuleContext.Provider>\r\n    </SafeAreaView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  safeAreaView: {\r\n    flex: 1,\r\n  },\r\n});\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/transferable-discipleship/app/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [825], () => (__webpack_require__(6271)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["PATH_DELIMITER","ROOT_PATH","pathJoin","_len","arguments","length","paths","Array","_key","pathsClean","filter","path","Error","pathSegments","flatMap","split","i","splice","_pathSegments","_toArray","basePath","slice","reduce","joinedPath","currentPath","isWeb","Platform","isDev","Constants","isString","o","String","serializedAppDataNew","require","licensesScreen","addSubscreensToMap","screenMap","screens","forEach","screen","screenId","includes","assertScreenIdIsValid","id","screenPath","has","screenClone","_objectSpread","set","title","subscreens","appScreens","appData","deserializedAppData","initialScreen","Map","concat","_toConsumableArray","get","header","contents","style","borderColor","borderWidth","deserializeAppData","getAppScreens","getScreenData","forEachContentOfContents","callback","content","forEachContent","createDesignStyleSheets","baseStyles","extensions","baseStyleSheet","StyleSheet","Proxy","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","name","designStyleSheet","overlaySheets","extends","extensionName","overlaidSheet","currentSheet","keys","styleName","_overlaidSheet","_currentSheet","overlaidStyle","currentStyle","designStyleSheetComposition","design","DEFAULT_FONT_FAMILY","DEFAULT_PROPS","getTextDataObject","textData","text","Text","props","_DEFAULT_PROPS$getTex","onPress","styles","designStyles","lineText","highestStyleIndex","highestFontFamily","undefined","highestFontWeight","highestFontStyle","flat","styleEntry","fontWeight","fontStyle","fontFamily","textStyle","_objectWithoutProperties","_excluded","weight","parseInt","styledFontFamily","Number","isNaN","console","warn","push","_jsx","ReactText","children","fontSize","color","theme","subheader","small","HeaderText","textDataObject","SubheaderText","Header","headerText","subheaderText","_ref$lineTexts","lineTexts","_ref$design","designStyle","headerTextObject","subheaderTextObject","_jsxs","View","headerView","lineTextObject","paddingTop","paddingBottom","backgroundColor","paddingHorizontal","width","borderBottomWidth","borderBottomColor","textAlign","marginTop","section","BasicButton","_ref$text","textObject","TouchableOpacity","navButton","navButtonText","padding","borderRadius","answer","ActionFactory","navigate","to","navigation","route","link","_asyncToGenerator","toUrl","replace","window","open","openURL","ActionButton","action","buttonData","useNavigation","useRoute","useMemo","type","buttonTextObject","textDecorationLine","ButtonList","buttons","_Fragment","button","TScrollView","bottomPadding","scrollViewProps","ScrollView","contentContainerStyle","showsVerticalScrollIndicator","showsHorizontalScrollIndicator","layout","flex","justifyContent","alignItems","createContext","ContentListDesignPadding","tight","comfortable","loose","getContentListDesignPadding","ContentList","_ref$contents","_ref$controlIsOpen","controlIsOpen","_ref$openIndexDefault","openIndexDefault","_ref$padTop","padTop","_ref$padBottom","padBottom","_useContext","useContext","ContentsModuleContext","Contents","isOpenable","contentPadding","_useState","useState","_useState2","openIndex","setOpenIndex","openableIndex","gap","marginBottom","contentObject","openObject","thisOpenableIndex","isOpen","onChange","isOpening","React","key","Screens","HeaderWithButtons","headerData","buttonListData","contentInsetAdjustmentBehavior","ContentListScreen","_ref2$padTop","_ref2$padBottom","screenData","WebWrapper","phone","height","Buttons","ToggleButton","_altButtons$loop$prop","altButtons","loop","buttonDataProps","buttonIndex","setButtonIndex","currentButtonIndex","Math","min","Slide","slideProps","_slideProps$canClose","canClose","_slideProps$isOpenDef","isOpenDefault","isOpenProp","_slideProps$design","contentListProps","setIsOpen","useEffect","slideView","slideViewOpen","TouchableWithoutFeedback","headerViewClosed","contentView","pressableHeaderView","chevron","chevronClosed","closedContent","contentDesign","flexDirection","display","web","cursor","primary","defaultHiddenButton","defaultRevealedButton","alignSelf","bibleApiAvailableTranslations","getTranslationById","resourceInfo","find","resInfo","scriptureCache","scriptureUrl","getScripture","reference","shortName","translationInfo","getTranslation","translationId","cachedVerses","verses","Promise","resolve","versesUrl","sourceUrl","versesPromise","responseContents","error","response","fetch","json","ok","e","apiVerseRange","translation_id","apiVerse","verse","mapApiVerseToContent","_cacheAllScripture","getScripturePromises","Set","scriptureSlide","scripture","isArray","add","scrRangeDisplay","allSettled","values","localStorage","setItem","JSON","stringify","apply","cacheAllScripture","ScriptureText","scriptureText","textProps","v","str","toString","trim","join","images","icon","isRemote","imageUrl","startsWith","getImageSource","uri","ScriptureSlide","_ref$padding","scriptures","scr","showButton","hiddenButton","revealedButton","hiddenButtonMerged","revealedButtonMerged","ScrRangeDisplay","_usePromise","promiseFactoryCallback","defaultValue","preserveValue","value","setValue","_useState3","_useState4","loading","setLoading","promiseIsCurrent","result","usePromise","useCallback","Image","source","image","isModal","setIsModal","defaultSize","ReactImage","ImageView","imageIndex","visible","onRequestClose","animationType","swipeToCloseEnabled","ROUTE_STACK_KEY","App","isDarkMode","useColorScheme","backgroundStyle","Stack","createNativeStackNavigator","restoredRoutes","routeStackJson","sessionStorage","getItem","parse","_useFonts","useFonts","LibreFranklin","LibreFranklin_bold","LibreFranklin_italic","LibreFranklin_bold_italic","OpenSauceOne","OpenSauceOne_bold","OpenSauceOne_italic","OpenSauceOne_bold_italic","_useFonts2","fontsLoaded","fontError","isWaitingForFontLoading","setIsWaitingForFontLoading","setTimeout","onLayoutRootView","hideAsync","SafeAreaView","safeAreaView","onLayout","ContentsModule","NavigationContainer","initialState","routes","StatusBar","barStyle","Navigator","initialRouteName","screenListeners","state","_e$data","_e$data$state","_e$data$state$routes","routeStack","data","_screen$showNavigatio","Screen","component","options","headerStyle","headerShadowVisible","headerTintColor","contentStyle","borderTopWidth","borderTopColor","headerShown","showNavigationBar","preventAutoHideAsync","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","r","n","getter","__esModule","d","a","leafPrototypes","getProto","getPrototypeOf","obj","t","mode","this","then","ns","create","def","current","indexOf","getOwnPropertyNames","definition","defineProperty","enumerable","g","globalThis","Function","prop","prototype","hasOwnProperty","Symbol","toStringTag","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}